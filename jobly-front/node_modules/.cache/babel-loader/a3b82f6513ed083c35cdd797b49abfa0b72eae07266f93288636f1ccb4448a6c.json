{"ast":null,"code":"var _jsxFileName = \"/Users/sasuke/code/software-dev-bootcamp/react-jobly/jobly-front/src/components/LoginForm.js\",\n  _s = $RefreshSig$();\nimport { useState, useContext } from 'react';\nimport { TokenContext } from '../context/TokenContext';\nimport { UserContext } from \"../context/UserContext\";\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport JoblyApi from '../api';\nimport Button from './Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function LoginForm() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const {\n    setToken\n  } = useContext(TokenContext);\n  const {\n    setCurrentUser\n  } = useContext(UserContext);\n  const [tokenStorage, setTokenStorage, removeToken] = useLocalStorage(null);\n  const [user, setUser, removeUser] = useLocalStorage(null);\n  function handleChange(evt) {\n    evt.target.name === 'username' ? setUsername(evt.target.value) : setPassword(evt.target.value);\n  }\n  async function handleSubmit(evt) {\n    try {\n      const token = await JoblyApi.loginUser(username, password);\n      setToken(token);\n      setCurrentUser(username);\n      setTokenStorage('token', token);\n      setUser('user', username);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"username\",\n        id: \"username\",\n        autoComplete: \"username\",\n        onChange: handleChange,\n        value: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        id: \"password\",\n        autoComplete: \"current-password\",\n        onChange: handleChange,\n        value: password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        path: \"/\",\n        text: \"Login\",\n        func: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this)\n  }, void 0, false);\n}\n_s(LoginForm, \"bx09t/yVhjEnR4F3tUpZEwJzUzI=\", false, function () {\n  return [useLocalStorage, useLocalStorage];\n});\n_c = LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["useState","useContext","TokenContext","UserContext","useLocalStorage","JoblyApi","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginForm","_s","username","setUsername","password","setPassword","setToken","setCurrentUser","tokenStorage","setTokenStorage","removeToken","user","setUser","removeUser","handleChange","evt","target","name","value","handleSubmit","token","loginUser","err","console","error","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","autoComplete","onChange","path","text","func","_c","$RefreshReg$"],"sources":["/Users/sasuke/code/software-dev-bootcamp/react-jobly/jobly-front/src/components/LoginForm.js"],"sourcesContent":["import { useState, useContext } from 'react';\nimport { TokenContext } from '../context/TokenContext';\nimport { UserContext } from \"../context/UserContext\";\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport JoblyApi from '../api';\nimport Button from './Button';\n\nexport default function LoginForm() {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const {setToken} = useContext(TokenContext);\n    const {setCurrentUser} = useContext(UserContext);\n    const [tokenStorage, setTokenStorage, removeToken] = useLocalStorage(null);\n    const [user, setUser, removeUser] = useLocalStorage(null);\n\n    function handleChange(evt) {\n        (evt.target.name === 'username')? setUsername(evt.target.value)\n        : setPassword(evt.target.value)\n     }\n\n     async function handleSubmit(evt) {\n        try {\n            const token = await JoblyApi.loginUser(username, password);\n            setToken(token);\n            setCurrentUser(username);\n            setTokenStorage('token', token);\n            setUser('user', username);\n        } catch (err) {\n            console.error(err);\n        }\n     }\n\n    return (\n        <>\n           <form >\n            <label htmlFor=\"username\">Username</label>\n            <input \n                type=\"text\" \n                name=\"username\" \n                id=\"username\" \n                autoComplete='username' \n                onChange={handleChange} \n                value={username} \n            />\n            <label htmlFor=\"password\">Password</label>\n            <input \n                type=\"password\" \n                name=\"password\" \n                id=\"password\" \n                autoComplete='current-password' \n                onChange={handleChange} \n                value={password}\n            />\n            <Button path='/' text='Login' func={handleSubmit} />\n\n           </form>\n        </>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}